#!/bin/sh

echo "Loading, please wait ..."

[ -d /dev ]  || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ]  || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ]  || mkdir /tmp
mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc

[ -f /etc/udev/udev.conf ] && . /etc/udev/udev.conf
if ! mount -t devtmpfs -o mode=0755 none /dev; then
	echo "W: devtmpfs not available, falling back to tmpfs for /dev"
	mount -t tmpfs -o size=10M,mode=0755 udev /dev
	[ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
	[ -e /dev/null ]    || mknod -m 0600 /dev/null    c 1 3
fi

mkdir -p /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 none /dev/pts || true

. /conf/initrd.conf
for conf in /conf/conf.d/*; do
	[ -f "$conf" ] && . "$conf"
done

export boot=$BOOT
export break=
export debug=$DEBUG
export init=$INIT
export panic=
export quiet=
export readonly=
export root=
export rootdelay=
export rootflags=
export rootfstype=
export rootmnt=/root

# helper routines
. /scripts/functions

# parse command line options
for x in $(cat /proc/cmdline)
do
	case $x in
	boot=*)
		boot=${x#boot=}
		;;
	break=*)
		break=${x#break=}
		;;
	debug)
		debug=y
		quiet=n
		;;
	init=*)
		init=${x#init=}
		;;
	netconsole=*)
		netconsole=${x#netconsole=}
		;;
	panic=*)
		panic=${x#panic=}
		[ -n "${panic##*[![:digit:]]*}" ] || panic=
		;;
	quiet)
		quiet=y
		;;
	root=*)
		root=${x#root=}
		case $root in
		UUID=*)
			root="/dev/disk/by-uuid/${root#UUID=}"
			;;
		LABEL=*)
			root="/dev/disk/by-label/${root#LABEL=}"
			;;
		/dev/nfs)
			-z [ "$boot" ] && boot=nfs
			;;
		esac
		;;
	rootdelay=*)
		rootdelay=${x#rootdelay}
		[ -n "${rootdelay##*[![:digit:]]*}" ] || rootdelay=
		;;
	rootflags=*)
		rootflags=${x#rootflags=}
		;;
	rootfstype=*)
		rootfstype=${x#rootfstype=}
		;;
	rootmnt=*)
		rootmnt=${x#rootmnt=}
		;;
	ro)
		readonly=y
		;;
	rw)
		readonly=n
		;;
	esac
done

[ -n "${netconsole}" ] && modprobe netconsole netconsole="$netconsole"

maybe_break top
run_scripts /scripts/init-top

maybe_break modules
load_modules

maybe_break premount
run_scripts /scripts/init-premount

maybe_break mount
if [ ! -f "/scripts/$boot" ]; then
	panic "FATAL: boot method '$boot' does not support."
fi
. /scripts/$boot

maybe_break mountroot
mountroot

maybe_break bottom
run_scripts /scripts/init-bottom

# move sys and proc
mount -n -o move /sys  $rootmnt/sys
mount -n -o move /proc $rootmnt/proc

maybe_break init

# change root
cd $rootmnt
#mkdir .old-root
#pivot_root . .old-root
exec chroot /root $init \
	</dev/console >/dev/console 2>&1

panic "Could not executes"
